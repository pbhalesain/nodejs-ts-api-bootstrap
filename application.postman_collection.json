{
	"info": {
		"_postman_id": "a0033904-ab33-4dec-935d-d641972a4a6e",
		"name": "REST API Application",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4733642"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Create User",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\",\n    \"passwordConfirmation\": \"{{password}}\",\n    \"name\": \"{{name}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/users",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"postman.setEnvironmentVariable(\"accessToken\", jsonData.accessToken);",
									"postman.setEnvironmentVariable(\"refreshToken\", jsonData.refreshToken);",
									"pm.environment.set(\"accessToken\", jsonData.accessToken);",
									"pm.environment.set(\"refreshToken\", jsonData.refreshToken);",
									"var accessToken = pm.environment.get(\"accessToken\");",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields - accessToken and refreshToken\", function () {    ",
									"    pm.expect(jsonData).to.be.an('object');",
									"    pm.expect(jsonData).to.have.property('accessToken');",
									"    pm.expect(jsonData).to.have.property('refreshToken');",
									"});",
									"",
									"pm.test(\"AccessToken is not an empty string\", function () {    ",
									"    pm.expect(jsonData.accessToken).to.be.a('string').and.to.have.lengthOf.at.least(1, \"AccessToken should not be empty\");",
									"});",
									"",
									"pm.test(\"RefreshToken should not be an empty string\", function () {    ",
									"    pm.expect(jsonData.refreshToken).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {    ",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/sessions",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"sessions"
							]
						}
					},
					"response": [
						{
							"name": "Create Session",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/api/sessions",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"api",
										"sessions"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "1426"
								},
								{
									"key": "ETag",
									"value": "W/\"592-O2MZXtHLY1+nMDg3rSvKb2JlqmQ\""
								},
								{
									"key": "Date",
									"value": "Sat, 13 Apr 2024 19:05:57 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"accessToken\": \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NjFhODM3YTYyMWM1YzgwMWJmOTZhMWUiLCJlbWFpbCI6InRlc3RAZXhhbXBsZS5jb20iLCJuYW1lIjoiSmFuZSBEb2UiLCJjcmVhdGVkQXQiOiIyMDI0LTA0LTEzVDEzOjA3OjA2LjE3OVoiLCJ1cGRhdGVkQXQiOiIyMDI0LTA0LTEzVDEzOjA3OjA2LjE3OVoiLCJfX3YiOjAsInNlc3Npb24iOiI2NjFhZDc5NWFiYzUwOGFhNjQ1NWUzNDQiLCJpYXQiOjE3MTMwMzUxNTcsImV4cCI6MTcxMzAzNjk1N30.nHN9k5EHYwjUUTx1ZjvNl2WEFMMzjReuovg-F_IO5kdQ6RWO4AVjAMi1kZZTEjYhA48_O8ja-3tTb46dwN4gr11I3EGdVdzPNH3IaPMohBV3ZHW4dDYGH_GxW__BbxgzZ6QPPSKjR5aaq17mMS5H6ajNQIO1fV6-n3Feb3cp5yaehv0I7vTX1qW6hFg3TiiPHoUATbh623zdOWi-Ij8MjolY6Rky4bwxbcQWcJkjHVYQO1FL30ur8bnw7Jvx2lBynUnt6sZtYfMs5Jsi-eKctmPtZLpXT5o6lGKJQ03pFMsKVNPlIMguPBZ-kD0S-DGfkbD9ppe8USPAAFNZUXifsw\",\n    \"refreshToken\": \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NjFhODM3YTYyMWM1YzgwMWJmOTZhMWUiLCJlbWFpbCI6InRlc3RAZXhhbXBsZS5jb20iLCJuYW1lIjoiSmFuZSBEb2UiLCJjcmVhdGVkQXQiOiIyMDI0LTA0LTEzVDEzOjA3OjA2LjE3OVoiLCJ1cGRhdGVkQXQiOiIyMDI0LTA0LTEzVDEzOjA3OjA2LjE3OVoiLCJfX3YiOjAsInNlc3Npb24iOiI2NjFhZDc5NWFiYzUwOGFhNjQ1NWUzNDQiLCJpYXQiOjE3MTMwMzUxNTcsImV4cCI6MTcxMzAzNjk1N30.nHN9k5EHYwjUUTx1ZjvNl2WEFMMzjReuovg-F_IO5kdQ6RWO4AVjAMi1kZZTEjYhA48_O8ja-3tTb46dwN4gr11I3EGdVdzPNH3IaPMohBV3ZHW4dDYGH_GxW__BbxgzZ6QPPSKjR5aaq17mMS5H6ajNQIO1fV6-n3Feb3cp5yaehv0I7vTX1qW6hFg3TiiPHoUATbh623zdOWi-Ij8MjolY6Rky4bwxbcQWcJkjHVYQO1FL30ur8bnw7Jvx2lBynUnt6sZtYfMs5Jsi-eKctmPtZLpXT5o6lGKJQ03pFMsKVNPlIMguPBZ-kD0S-DGfkbD9ppe8USPAAFNZUXifsw\"\n}"
						}
					]
				},
				{
					"name": "Get Sessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"const newAccessToken = responseHeaders['x-access-token']",
									"",
									"if(newAccessToken){",
									"    console.log('Set new access token')",
									"postman.setEnvironmentVariable(\"accessToken\", newAccessToken);",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-refresh",
								"value": "{{refreshToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{endpoint}}/api/sessions",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"sessions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const newAccessToken = responseHeaders['x-access-token']",
									"",
									"if(newAccessToken){",
									"    console.log('Set new access token')",
									"postman.setEnvironmentVariable(\"accessToken\", newAccessToken);",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "x-refresh",
								"value": "{{refreshToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{endpoint}}/api/sessions",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"sessions"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Product",
			"item": [
				{
					"name": "Create Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"productId\", jsonData.productId);",
									"",
									"",
									"const newAccessToken = responseHeaders['x-access-token']",
									"",
									"if(newAccessToken){",
									"    console.log('Set new access token')",
									"postman.setEnvironmentVariable(\"accessToken\", newAccessToken);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "x-refresh",
								"value": "{{refreshToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Canon EOS 1500D DSLR Camera with 18-55mm Lens\",\n    \"description\": \"Designed for first-time DSLR owners who want impressive results straight out of the box, capture those magic moments no matter your level with the EOS 1500D. With easy to use automatic shooting modes, large 24.1 MP sensor, Canon Camera Connect app integration and built-in feature guide, EOS 1500D is always ready to go.\",\n    \"price\": 879.99,\n    \"image\": \"https://i.imgur.com/QlRphfQ.jpg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/products",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"A post title\",\n    \"body\": \"Some HTML text Some HTML text Some HTML text Some HTML text Some HTML text Some HTML text Some HTML text Some HTML text Some HTML text Some HTML text Some HTML text Some HTML text Some HTML text Some HTML text\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/products/{{productId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"products",
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const newAccessToken = responseHeaders['x-access-token']",
									"",
									"if(newAccessToken){",
									"    console.log('Set new access token')",
									"postman.setEnvironmentVariable(\"accessToken\", newAccessToken);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "x-refresh",
								"value": "{{refreshToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Canon EOS 1500D DSLR Camera with 18-55mm Lens\",\n    \"description\": \"Designed for first-time DSLR owners who want impressive results straight out of the box, capture those magic moments no matter your level with the EOS 1500D. With easy to use automatic shooting modes, large 24.1 MP sensor, Canon Camera Connect app integration and built-in feature guide, EOS 1500D is always ready to go.\",\n    \"price\": 699.99,\n    \"image\": \"https://i.imgur.com/QlRphfQ.jpg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/products/{{productId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"products",
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const newAccessToken = responseHeaders['x-access-token']",
									"",
									"if(newAccessToken){",
									"    console.log('Set new access token')",
									"postman.setEnvironmentVariable(\"accessToken\", newAccessToken);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "x-refresh",
								"value": "{{refreshToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"A post title\",\n    \"body\": \"Some HTML text Some HTML text Some HTML text Some HTML text Some HTML text Some HTML text Some HTML text Some HTML text Some HTML text Some HTML text Some HTML text Some HTML text Some HTML text Some HTML text\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/products/{{productId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"products",
								"{{productId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Metrics",
			"item": [
				{
					"name": "Get metrics",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:9100/metrics",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9100",
							"path": [
								"metrics"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Site Info",
			"item": [
				{
					"name": "Get PrivacyPolicy",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Get Terms",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "email",
			"value": "test@example.com"
		},
		{
			"key": "password",
			"value": "Password456!"
		},
		{
			"key": "name",
			"value": "Jane Doe"
		},
		{
			"key": "accessToken",
			"value": "<accessToken will be set when you create a session>"
		},
		{
			"key": "refreshToken",
			"value": "<refreshToken will be set when you create a session>"
		},
		{
			"key": "endpoint",
			"value": "http://localhost:1337"
		},
		{
			"key": "productId",
			"value": "<productId will be set when you create a session>"
		}
	]
}